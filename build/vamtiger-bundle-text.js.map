{"version":3,"file":"vamtiger-bundle-text.js","sources":["../source/types.ts","../source/get-bundle-export.ts","../source/vamtiger-bundle-text.ts"],"sourcesContent":["export enum StringConstant {\n    nothing = '',\n    newline = '\\n',\n    space = ' ',\n    slash = '/',\n    period = '.',\n    and = '&&'\n}\n\nexport enum CommandlineArguments {\n    folder = 'folder',\n    name = 'name',\n    type = 'type',\n    filter = 'filter'\n}\n\nexport enum ErrorMessage {\n    noName = 'No bundle name defined',\n    noFolder = 'No bundle folder defined',\n    noBundle = 'No bundle created'\n}\n\nexport enum BundleType {\n    ts = 'ts',\n    js = 'js',\n    json = 'json'\n}\n\nexport interface IGetBundleExport {\n    folder: string;\n    name: string;\n    type: BundleType;\n    filter?: string;\n}\n\nexport interface IBundleExport {\n    [key: string]: string;\n}\n\nexport const regex = {\n    leadingSlash: new RegExp(`^${StringConstant.slash}`)\n}","import { resolve as resolvePath } from 'path';\nimport getFileText from 'vamtiger-get-file-text';\nimport createFile from 'vamtiger-create-file';\nimport getFolderContent, { ClassifiedDirectoryContent } from 'vamtiger-get-directory-content-recursive';\nimport {\n    IGetBundleExport,\n    IBundleExport,\n    StringConstant,\n    BundleType,\n    ErrorMessage,\n    regex\n} from './types';\n\nconst { stringify } = JSON;\nconst { nothing } = StringConstant;\nconst { noBundle } = ErrorMessage;\nconst { leadingSlash } = regex;\n\nexport default async function ({ folder, name, type, filter: filterPattern }: IGetBundleExport) {\n    const { file: filePaths } = await getFolderContent({\n        path: folder,\n        classified: true\n    }) as ClassifiedDirectoryContent;\n    const filter = filterPattern && new RegExp(filterPattern, 'i');\n    const bundlePath = resolvePath(\n        folder,\n        `${name}.${type}`\n    );\n    const filteredFilePaths = filter && filePaths.filter(filePath => (filePath as string).match(filter)) || filePaths;\n    const bundleExport = await Promise\n        .all((filteredFilePaths as string[]).map(async filePath => ({ [filePath.replace(folder, nothing).replace(leadingSlash, nothing)]: await getFileText(filePath)}) as IBundleExport))\n        .then(bundleExports => bundleExports.reduce((bundleExport, currentBundleExport) => ({...bundleExport, ...currentBundleExport}), {} as IBundleExport));\n    const bundleExportStatement = type === BundleType.json && stringify(bundleExport)\n        || type === BundleType.js && `module.exports = ${stringify(bundleExport)};`\n        || type === BundleType.ts && `export default ${stringify(bundleExport)};`;\n\n    if (!bundleExportStatement) {\n        throw new Error(noBundle);\n    }\n\n    await createFile(bundlePath, bundleExportStatement);\n\n    return bundleExportStatement;\n}","import { resolve as resolvePath } from 'path';\nimport Args from 'vamtiger-argv/build/main';\nimport {\n    CommandlineArguments,\n    IGetBundleExport,\n    ErrorMessage,\n    BundleType\n} from './types';\nimport getBundleExport from './get-bundle-export';\n\nconst args = new Args();\nconst { cwd } = process;\nconst folder = args.has(CommandlineArguments.folder) && resolvePath(cwd(), args.get(CommandlineArguments.folder) as string);\nconst name = args.has(CommandlineArguments.name) && args.get(CommandlineArguments.name);\nconst type = (args.has(CommandlineArguments.type) && args.get(CommandlineArguments.type) || BundleType.ts) as BundleType;\nconst filter = args.has(CommandlineArguments.filter) && args.get(CommandlineArguments.filter) || '';\nconst { noName, noFolder } = ErrorMessage;\n\nif (!name) {\n    throw new Error(noName);\n} else if (!folder) {\n    throw new Error(noFolder);\n}\n\nbundleText({ folder, name, type, filter });\n\nasync function bundleText({ folder, name, type, filter }: IGetBundleExport) {\n    const bundleText = await getBundleExport({ folder, name, type, filter })\n        .catch(handleError);\n\n    return bundleText;\n}\n\nfunction handleError(error: Error) {\n    console.error(error.message);\n    console.error(error.stack);\n    process.exit();\n}\n\nexport default bundleText;\n"],"names":["StringConstant","CommandlineArguments","ErrorMessage","BundleType","regex","leadingSlash","RegExp","slash","stringify","JSON","nothing","noBundle","async","folder","name","type","filter","filterPattern","file","filePaths","getFolderContent","path","classified","bundlePath","resolvePath","filteredFilePaths","filePath","match","bundleExport","Promise","all","map","[object Object]","replace","getFileText","then","bundleExports","reduce","currentBundleExport","bundleExportStatement","json","js","ts","Error","createFile","args","Args","cwd","process","has","get","noName","noFolder","bundleText","getBundleExport","catch","handleError","error","console","message","stack","exit"],"mappings":"qGAAYA,eASAC,qBAOAC,aAMAC,4SAtBZ,SAAYH,GACRA,aACAA,eACAA,YACAA,YACAA,aACAA,WANJ,CAAYA,iBAAAA,oBASZ,SAAYC,GACRA,kBACAA,cACAA,cACAA,kBAJJ,CAAYA,uBAAAA,0BAOZ,SAAYC,GACRA,kCACAA,sCACAA,+BAHJ,CAAYA,eAAAA,kBAMZ,SAAYC,GACRA,UACAA,UACAA,cAHJ,CAAYA,aAAAA,gBAiBZ,MAAaC,OACTC,aAAc,IAAIC,WAAWN,eAAeO,WC3B1CC,UAAEA,WAAcC,MAChBC,QAAEA,SAAYV,gBACdW,SAAEA,UAAaT,cACfG,aAAEA,cAAiBD,MAEzBQ,gCAA+BC,OAAEA,EAAMC,KAAEA,EAAIC,KAAEA,EAAMC,OAAQC,IACzD,MAAQC,KAAMC,SAAoBC,kBAC9BC,KAAMR,EACNS,YAAY,IAEVN,EAASC,GAAiB,IAAIX,OAAOW,EAAe,KACpDM,EAAaC,aACfX,KACGC,KAAQC,KAETU,EAAoBT,GAAUG,EAAUH,OAAOU,GAAaA,EAAoBC,MAAMX,KAAYG,EAClGS,QAAqBC,QACtBC,IAAKL,EAA+BM,IAAInB,MAAMc,KAAeM,CAACN,EAASO,QAAQpB,EAAQH,SAASuB,QAAQ5B,aAAcK,gBAAiBwB,YAAYR,OACnJS,KAAKC,GAAiBA,EAAcC,OAAO,CAACT,EAAcU,qBAA6BV,EAAiBU,QACvGC,EAAwBxB,IAASZ,WAAWqC,MAAQhC,UAAUoB,IAC7Db,IAASZ,WAAWsC,wBAA0BjC,UAAUoB,OACxDb,IAASZ,WAAWuC,sBAAwBlC,UAAUoB,MAE7D,IAAKW,EACD,MAAM,IAAII,MAAMhC,UAKpB,aAFMiC,WAAWrB,EAAYgB,GAEtBA,EChCX,MAAMM,KAAO,IAAIC,MACXC,IAAEA,KAAQC,QACVnC,OAASgC,KAAKI,IAAIhD,qBAAqBY,SAAWW,aAAYuB,MAAOF,KAAKK,IAAIjD,qBAAqBY,SACnGC,KAAO+B,KAAKI,IAAIhD,qBAAqBa,OAAS+B,KAAKK,IAAIjD,qBAAqBa,MAC5EC,KAAQ8B,KAAKI,IAAIhD,qBAAqBc,OAAS8B,KAAKK,IAAIjD,qBAAqBc,OAASZ,WAAWuC,GACjG1B,OAAS6B,KAAKI,IAAIhD,qBAAqBe,SAAW6B,KAAKK,IAAIjD,qBAAqBe,SAAW,IAC3FmC,OAAEA,OAAMC,SAAEA,UAAalD,aAE7B,IAAKY,KACD,MAAM,IAAI6B,MAAMQ,QACb,IAAKtC,OACR,MAAM,IAAI8B,MAAMS,UAKpBxC,eAAeyC,YAAWxC,OAAEA,EAAMC,KAAEA,EAAIC,KAAEA,EAAIC,OAAEA,IAI5C,aAHyBsC,iBAAkBzC,OAAAA,EAAQC,KAAAA,EAAMC,KAAAA,EAAMC,OAAAA,IAC1DuC,MAAMC,aAKf,SAASA,YAAYC,GACjBC,QAAQD,MAAMA,EAAME,SACpBD,QAAQD,MAAMA,EAAMG,OACpBZ,QAAQa,OAZZR,YAAaxC,OAAAA,OAAQC,KAAAA,KAAMC,KAAAA,KAAMC,OAAAA"}